// services/ChatService.js

import { decodeJwt } from 'jose';

class ChatService {
    constructor(apiUrl, apiKey, token) {
        this.apiUrl = apiUrl;
        this.apiKey = apiKey;
        this.token = token;

        this.session = ''; // generated by eva. 
        this.isNew = true; // only true for first message to EVA

        this.authToken = null;
    }

    async auth(token, apiKey) {
        try {
            console.log('Authorizing user with Ask EVA');
            const response = await fetch(`${this.apiUrl}/auth`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`,
                },
                body: JSON.stringify({ token })
            });

            console.log('Request sent', response);

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.text();
            this.authToken = data;

            console.log('Auth Token', this.authToken);

            return data;
        } catch (error) {
            console.error('Error in ChatService:', error);
            throw error;
        }
    }

    async sendMessage(message, userInformation, context) {
        try {
            if (!this.isValid()) {
                // refresh the token
                this.authToken = await this.auth(this.token, this.apiKey);
            }

            let body = this.createBody(message, userInformation, context);

            const response = await fetch(`${this.apiUrl}/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.authToken}`,
                },
                body: JSON.stringify(body),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();

            console.log('MessageData', data)

            this.isNew = false;
            this.session = data.session;

            return data.response;
        } catch (error) {
            console.error('Error in ChatService:', error);
            throw error;
        }
    }

    createBody(message, userInformation, context) {
        if (this.isNew === true) {
            return {
                message,
                userInformation,
                "context": context,
                "isNew": true
            }
        } else {
            return {
                message,
                userInformation,
                "context": context,
                "session": this.session,
                "isNew": false
            }
        }
    }

    isValid() {
        if (!this.authToken || this.authToken === '') {
            // No token available
            return false;
        }

        try {
            const payload = decodeJwt(this.authToken);
            const currentTime = Math.floor(Date.now() / 1000);

            if (payload.exp && payload.exp > currentTime) {
                // Token is valid
                console.log('JWT Payload:', payload);
                return true;
            } else {
                // Token has expired
                console.warn('Token has expired.');
                return false;
            }
        } catch (error) {
            console.error('Failed to decode JWT:', error);
            return false;
        }

    }
}

export default ChatService;